import streamlit as st

st.set_page_config(page_title="Best Cargo Train Calculator")

# Custom CSS for green dropdown styling
st.markdown("""
    <style>
    div[data-baseweb="select"] > div {
        border-color: #28a745 !important;
        box-shadow: 0 0 0 1px #28a745 !important;
    }
    </style>
""", unsafe_allow_html=True)

# Language options
languages = {
    "English": "en",
    "Ti·∫øng Vi·ªát": "vi",
    "ÁπÅÈ´î‰∏≠Êñá": "zh"
}

lang_choice = st.selectbox("üåê Select Language / Ch·ªçn ng√¥n ng·ªØ / ÈÅ∏ÊìáË™ûË®Ä", list(languages.keys()))
lang = languages[lang_choice]

# Localized content
text = {
    "train_title": {
        "en": "üöÇ Mega Express Train",
        "vi": "üöÇ T√†u si√™u t·ªëc Mega Express",
        "zh": "üöÇ Ë∂ÖÁ∫ßÂø´ËΩ¶ Mega Express"
    },
    "t10_title": {
        "en": "T10 Grind",
        "vi": "M√†i T10",
        "zh": "T10 Á£®ÁªÉ"
    },
    "train_intro": {
        "en": "Select your best cabin based on current queue sizes. This assumes that Cabin D is the best, followed by Cabin A, and Cabins B & C have equal value.",
        "vi": "Ch·ªçn khoang t·ªët nh·∫•t d·ª±a tr√™n s·ªë ng∆∞·ªùi x·∫øp h√†ng hi·ªán t·∫°i. Khoang D c√≥ gi√° tr·ªã cao nh·∫•t, ti·∫øp theo l√† A, c√≤n B v√† C c√≥ gi√° tr·ªã b·∫±ng nhau.",
        "zh": "Ê†πÊçÆÁõÆÂâçÊéíÈòü‰∫∫Êï∞ÈÄâÊã©ÊúÄ‰Ω≥ËΩ¶Âé¢„ÄÇËΩ¶Âé¢ D ‰∏∫ÊúÄÈ´ò‰ª∑ÂÄºÔºåÂÖ∂Ê¨°‰∏∫ AÔºåB Âíå C ‰ª∑ÂÄºÁõ∏Âêå„ÄÇ"
    },
    "ev_description": {
        "en": "**What is EV?** Expected Value (EV) estimates your average gain over time. A higher EV means a better long-term choice.",
        "vi": "**EV l√† g√¨?** Gi√° tr·ªã k·ª≥ v·ªçng (EV) ∆∞·ªõc t√≠nh m·ª©c l·ª£i trung b√¨nh c·ªßa b·∫°n theo th·ªùi gian. EV c√†ng cao th√¨ l·ª±a ch·ªçn c√†ng t·ªët v·ªÅ l√¢u d√†i.",
        "zh": "**‰ªÄ‰πàÊòØ EVÔºü** ÊúüÊúõÂÄº (EV) Ë°®Á§∫‰Ω†ÈïøÊúüÂπ≥ÂùáËÉΩËé∑ÂæóÁöÑÊî∂Áõä„ÄÇEV Ë∂äÈ´òÔºåÈïøÊúüË°®Áé∞Ë∂äÂ•Ω„ÄÇ"
    },
    "input_header": {
        "en": "üì• Input Queue Sizes for Each Cabin",
        "vi": "üì• Nh·∫≠p s·ªë ng∆∞·ªùi ƒëang x·∫øp h√†ng t·∫°i m·ªói khoang",
        "zh": "üì• ËæìÂÖ•ÊØè‰∏™ËΩ¶Âé¢ÁöÑÊéíÈòü‰∫∫Êï∞"
    },
    "input_label": {
        "en": "Cabin {name} (Enter the number of passengers in the queue here)",
        "vi": "Khoang {name} (Nh·∫≠p s·ªë ng∆∞·ªùi x·∫øp h√†ng t·∫°i ƒë√¢y)",
        "zh": "ËΩ¶Âé¢ {name}ÔºàËØ∑ËæìÂÖ•ÊéíÈòü‰∫∫Êï∞Ôºâ"
    },
    "ranking_header": {
        "en": "üìä Cabin Rankings by EV",
        "vi": "üìä X·∫øp h·∫°ng c√°c khoang theo EV",
        "zh": "üìä Ê†πÊçÆ EV ÊéíÂêçÁöÑËΩ¶Âé¢"
    },
    "t10_header": {
        "en": "Select Current Research Levels",
        "vi": "Ch·ªçn c·∫•p ƒë·ªô nghi√™n c·ª©u hi·ªán t·∫°i",
        "zh": "ÈÄâÊã©ÂΩìÂâçÁ†îÁ©∂Á≠âÁ∫ß"
    },
    "resource_total_header": {
        "en": "### Total Research Cost Remaining:",
        "vi": "### T·ªïng chi ph√≠ nghi√™n c·ª©u c√≤n l·∫°i:",
        "zh": "### Ââ©‰ΩôÁ†îÁ©∂ÊÄªÊàêÊú¨Ôºö"
    },
    "resource_labels": {
        "en": ["Iron", "Bread", "Gold"],
        "vi": ["S·∫Øt", "B√°nh m√¨", "V√†ng"],
        "zh": ["ÈìÅ", "Èù¢ÂåÖ", "ÈáëÂ∏Å"]
    },
    "cabins_no_input": {
        "en": "(Please select number of players in the queue)",
        "vi": "(Vui l√≤ng ch·ªçn s·ªë ng∆∞·ªùi trong h√†ng ƒë·ª£i)",
        "zh": "(ËØ∑ÈÄâÊã©ÊéíÈòü‰∫∫Êï∞)"
    }
}

def format_number(num):
    """Format number with M or G suffix"""
    if num >= 1000:
        # Billions
        return f"{num/1000:.1f}G"
    elif num >= 1:
        # Millions
        return f"{num:.1f}M"
    else:
        return str(num)

# Main app tabs
tabs = [
    text["train_title"][lang],
    text["t10_title"][lang]
]

selected_tab = st.tabs(tabs)

with selected_tab[0]:
    # Mega Express Train Calculator
    st.title(text["train_title"][lang])
    st.markdown(text["train_intro"][lang])

    st.subheader(text["input_header"][lang])
    queue_a = st.number_input(text["input_label"][lang].format(name="A"), min_value=0, value=0)
    queue_b = st.number_input(text["input_label"][lang].format(name="B"), min_value=0, value=0)
    queue_c = st.number_input(text["input_label"][lang].format(name="C"), min_value=0, value=0)
    queue_d = st.number_input(text["input_label"][lang].format(name="D"), min_value=0, value=0)

    cabins = {
        'A': {'queue': queue_a, 'value': 2},
        'B': {'queue': queue_b, 'value': 1},
        'C': {'queue': queue_c, 'value': 1},
        'D': {'queue': queue_d, 'value': 4}
    }

    def calculate_ev(queue_size, cabin_value):
        if queue_size == 0:
            return None  # None to indicate no input yet
        return (5 / queue_size) * cabin_value

    ev_list = []
    for name, data in cabins.items():
        ev = calculate_ev(data['queue'], data['value'])
        cabins[name]['ev'] = ev
        ev_list.append((name, ev))

    ev_list.sort(key=lambda x: (x[1] is not None, x[1]), reverse=True)

    st.subheader(text["ranking_header"][lang])
    st.markdown(text["ev_description"][lang])

    for rank, (name, ev) in enumerate(ev_list, start=1):
        if ev is None:
            st.markdown(f"**{rank}. Cabin {name} ‚Äî {text['cabins_no_input'][lang]}**")
        else:
            st.markdown(f"**{rank}. Cabin {name} ‚Äî EV = {ev:.2f}**")

with selected_tab[1]:
    # T10 Grind Calculator
    st.title(text["t10_title"][lang])
    st.subheader(text["t10_header"][lang])

    # Levels for dropdowns - all start at 0 except Advanced Protection now starts at 0
    adv_prot_levels = [str(i) for i in range(0, 11)]
    adv_prot_levels[-1] = "10 (Max)"

    hp_boost_levels = [str(i) for i in range(0, 11)]
    hp_boost_levels[-1] = "10 (Max)"

    atk_boost_levels = [str(i) for i in range(0, 11)]
    atk_boost_levels[-1] = "10 (Max)"

    def_boost_levels = [str(i) for i in range(0, 11)]
    def_boost_levels[-1] = "10 (Max)"

    unit_x_levels = ["0", "1 (Max)"]

    adv_prot = st.selectbox({
        "en": "Advanced Protection Level",
        "vi": "C·∫•p ƒë·ªô B·∫£o v·ªá n√¢ng cao",
        "zh": "È´òÁ∫ß‰øùÊä§Á≠âÁ∫ß"
    }[lang], adv_prot_levels, index=0)

    hp_boost = st.selectbox({
        "en": "HP Boost III Level",
        "vi": "C·∫•p ƒë·ªô TƒÉng HP III",
        "zh": "ÁîüÂëΩÊèêÂçá III Á≠âÁ∫ß"
    }[lang], hp_boost_levels, index=0)

    atk_boost = st.selectbox({
        "en": "Attack Boost III Level",
        "vi": "C·∫•p ƒë·ªô TƒÉng C√¥ng III",
        "zh": "ÊîªÂáªÊèêÂçá III Á≠âÁ∫ß"
    }[lang], atk_boost_levels, index=0)

    def_boost = st.selectbox({
        "en": "Defense Boost III Level",
        "vi": "C·∫•p ƒë·ªô TƒÉng Ph√≤ng III",
        "zh": "Èò≤Âæ°ÊèêÂçá III Á≠âÁ∫ß"
    }[lang], def_boost_levels, index=0)

    unit_x = st.selectbox({
        "en": "Unit X Level",
        "vi": "C·∫•p ƒë·ªô Unit X",
        "zh": "Âçï‰Ωç X Á≠âÁ∫ß"
    }[lang], unit_x_levels, index=0)

    def parse_level(level_str):
        return int(level_str.split()[0])

    adv_prot_level = parse_level(adv_prot)
    hp_boost_level = parse_level(hp_boost)
    atk_boost_level = parse_level(atk_boost)
    def_boost_level = parse_level(def_boost)
    unit_x_level = parse_level(unit_x)

    # Original raw costs (no longer divided by 1,000,000 here)
    iron_costs_raw = {
        "Advanced Protection": [0, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175],
        "HP Boost III": [0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96],
        "Attack Boost III": [0, 96, 134, 134, 134, 175, 175, 175, 175, 175, 175],
        "Defense Boost III": [0, 96, 96, 134, 134, 175, 175, 175, 175, 175, 175],
        "Unit X": [0, 187]
    }
    bread_costs_raw = iron_costs_raw  # same as iron
    gold_costs_raw = {
        "Advanced Protection": [0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522],
        "HP Boost III": [0, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287],
        "Attack Boost III": [0, 287, 403, 403, 403, 522, 522, 522, 522, 522, 522],
        "Defense Boost III": [0, 287, 287, 403, 403, 522, 522, 522, 522, 522, 522],
        "Unit X": [0, 560]
    }

    def sum_remaining(cost_list, current_level):
        # sum from next level to end
        return sum(cost_list[current_level + 1:])

    iron_total_raw = (
        sum_remaining(iron_costs_raw["Advanced Protection"], adv_prot_level)
        + sum_remaining(iron_costs_raw["HP Boost III"], hp_boost_level)
        + sum_remaining(iron_costs_raw["Attack Boost III"], atk_boost_level)
        + sum_remaining(iron_costs_raw["Defense Boost III"], def_boost_level)
        + sum_remaining(iron_costs_raw["Unit X"], unit_x_level)
    )

    bread_total_raw = (
        sum_remaining(bread_costs_raw["Advanced Protection"], adv_prot_level)
        + sum_remaining(bread_costs_raw["HP Boost III"], hp_boost_level)
        + sum_remaining(bread_costs_raw["Attack Boost III"], atk_boost_level)
        + sum_remaining(bread_costs_raw["Defense Boost III"], def_boost_level)
        + sum_remaining(bread_costs_raw["Unit X"], unit_x_level)
    )

    gold_total_raw = (
        sum_remaining(gold_costs_raw["Advanced Protection"], adv_prot_level)
        + sum_remaining(gold_costs_raw["HP Boost III"], hp_boost_level)
        + sum_remaining(gold_costs_raw["Attack Boost III"], atk_boost_level)
        + sum_remaining(gold_costs_raw["Defense Boost III"], def_boost_level)
        + sum_remaining(gold_costs_raw["Unit X"], unit_x_level)
    )

    # Convert raw totals to millions for display
    iron_total = iron_total_raw / 1_000_000
    bread_total = bread_total_raw / 1_000_000
    gold_total = gold_total_raw / 1_000_000

    st.markdown(text["resource_total_header"][lang])
    resource_labels = text["resource_labels"][lang]

    st.write(f"- {resource_labels[0]}: {format_number(iron_total)}")
    st.write(f"- {resource_labels[1]}: {format_number(bread_total)}")
    st.write(f"- {resource_labels[2]}: {format_number(gold_total)}")
